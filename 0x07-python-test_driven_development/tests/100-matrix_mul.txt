# 100-matrix_mul.txt
# Maira Wangui
# run test with python3 -m doctest -v ./tests/100-matrix_mul.txt

First import method to test
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

SUCCESS CASES:

Test signed and unsigned ints and floats in same size lists in list matrix:
     >>> m_a = [[1, 2], [3, 4]]
     >>> m_b = [[2, 0], [1, 2]]
     >>> print(matrix_mul(m_a, m_b))
     [[4, 4], [10, 8]]

     >>> m_a = [[-2.0, -3.0]]
     >>> m_b = [[-2.0], [-4.0]]
     >>> print(matrix_mul(m_a, m_b))
     [[16.0]]

FAIL CASES:

Test empty matrix:
     >>> m_a = []
     >>> m_b = [[2, 0], [1, 2]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     ValueError: m_a can't be empty

     >>> m_a = [[2, 0], [1, 2]]
     >>> m_b = []
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     ValueError: m_b can't be empty

     >>> m_a = [[2, 0], [1, 2]]
     >>> m_b = [[]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     ValueError: m_b can't be empty

Test different sized lists in matrix:
     >>> m_a = [[1, 2], [1, 2]]
     >>> m_b = [[1, 2], [1, 2, 3, 4]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: each row of m_b must be of the same size

     >>> m_a = [[1, 2], [1, 2, 3, 4]]
     >>> m_b = [[1, 2], [1, 2]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: each row of m_a must be of the same size

Test matrix with other data types:
     >>> m_a = [["hey"], ["you"]]
     >>> print(matrix_mul(m_a, m_a))
     Traceback (most recent call last):
     ...
     TypeError: m_a should contain only integers or floats

     >>> m_a = [[1, 2], [1, 2]]
     >>> m_b = [["hey"], ["you"]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: m_b should contain only integers or floats

     >>> m_a = (1, 2)
     >>> m_b = [[1, 2], [1, 2]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: m_a must be a list

     >>> m_a = [[1, 2], [1, 2]]
     >>> m_b = (1, 2)
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: m_b must be a list

Test matrix with 1 argument:
     >>> m_b = [[1, 2], [1, 2]]
     >>> print(matrix_mul( , m_b))
     Traceback (most recent call last):
     ...
     SyntaxError: invalid syntax

     >>> m_b = [[1, 2], [1, 2]]
     >>> print(matrix_mul(, m_b))
     Traceback (most recent call last):
     ...
     SyntaxError: invalid syntax

     >>> m_a = [[1, 2], [1, 2]]
     >>> print(matrix_mul(m_a))
     Traceback (most recent call last):
     ...
     TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Test matrix with not argument:
     >>> print(matrix_mul())
     Traceback (most recent call last):
     ...
     TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Test matrix with in a list of integer:
     >>> m_a = [1, 2, 3, 4]
     >>> m_b = [[1, 2], [5, 7]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: m_a must be a list of lists

Test matrix with in b list of integer:
     >>> m_b = [1, 2, 3, 4]
     >>> m_a = [[1, 2], [5, 7]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     TypeError: m_b must be a list of lists

Test matrix with  a y b list of integer:
     >>> m_b = [[1, 2, 3, 4],[1, 2, 3, 4],[1, 2, 3, 4]]
     >>> m_a = [[6, 7], [1, 3]]
     >>> print(matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     ValueError: m_a and m_b can't be multiplied
